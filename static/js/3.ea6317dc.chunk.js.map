{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","descriptionBlock","contact","mainPhoto","button","file_upload_label_input","postsBlock","posts","item","ProfileStatusWithHooks","props","_useState","useState","_useState2","Object","slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","react_default","a","createElement","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","_ref","handleSubmit","error","profile","onSubmit","className","s","onClick","style","formSammaryError","creatField","Input","type","Textarea","keys","contacts","map","key","ProfileData","_ref2","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","ProfileInfo_Contact","contactTitle","contactValue","Contact","_ref3","ProfileInfo","savePhoto","saveProfile","Preloader","src","photos","large","userPhoto","target","files","length","ProfileInfo_ProfileDataForm","initialValues","formData","then","ProfileInfo_ProfileData","ProfileInfo_ProfileStatusWithHooks","Post","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","placeholder","validate","required","MyPosts","React","memo","postsElements","toConsumableArray","reverse","p","MyPosts_Post_Post","id","createRef","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","NewPostText","addPostActionCreator","Profile","Profile_ProfileInfo_ProfileInfo","MyPosts_MyPostsContainer","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","components_Profile_Profile","assign","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.ea6317dc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__sGsh4\",\"contact\":\"ProfileInfo_contact__1yj2t\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3HkBF\",\"button\":\"ProfileInfo_button__1-ezY\",\"file_upload_label_input\":\"ProfileInfo_file_upload_label_input__1HdhW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__XUT5M\",\"posts\":\"MyPosts_posts__3wh1s\",\"button\":\"MyPosts_button__R8pLu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3qPUe\"};","import React, {useState,useEffect} from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus (props.status);\r\n    }, [props.status] );\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <b>Status: </b> <span onDoubleClick={ activateEditMode }>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode }\r\n                       value={status} />\r\n            </div>\r\n            }\r\n        </div>\r\n    )}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../common/Forms Controls/FormsControls.module.css\";\r\nimport {creatField, Input, Textarea} from \"../../common/Forms Controls/Forms Controls\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, error, profile}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button className={s.button} onClick={() => { }}>save</button></div>\r\n        {error && <div className={style.formSammaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {creatField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: { creatField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            { creatField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            { creatField(\"About me\", \"aboutMe\", [], Textarea  )}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}: {creatField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState}  from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../asses/imeges/userPhoto.jpg\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n    saveProfile(formData).then( () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input className={s.file_upload_label_input} type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div> <button className={s.button} onClick={goToEditMode}>edit</button> </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://i.pinimg.com/originals/b5/bb/fb/b5bbfbe67191cc6baf4753c6eb955e70.jpg' />\r\n            { props.message }\r\n\r\n            <div>\r\n                <span>like</span>\r\n                { props.likesCount }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/Forms Controls/Forms Controls\";\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name=\"newPostText\" component={Textarea} placeholder={\"Post message\"}\r\n                   validate={[required, maxLength10]} />\r\n        </div>\r\n        <div>\r\n            <button className={s.button}>Add post</button>\r\n        </div>\r\n    </form>;\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reduser copy\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet MapStateToProps=(state) => {\r\n    return {\r\n\r\n        posts:  state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet MapDispatchToProps=(dispatch) => {\r\n    return {\r\n\r\n             addPost: (NewPostText) => {\r\n        dispatch(addPostActionCreator(NewPostText));\r\n    }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(MapStateToProps,MapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reduser copy\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId ) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log(\"RENDER PROFILE\");\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    //console.log('mapStateToProps PROFILE')\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n"],"sourceRoot":""}