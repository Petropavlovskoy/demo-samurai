{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","error","profile","onSubmit","className","s","button","onClick","style","formSammaryError","creatField","Input","type","Textarea","Object","keys","contacts","map","key","contact","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","file_upload_label_input","target","files","length","initialValues","formData","then","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","placeholder","validate","required","MyPosts","React","memo","postsElements","posts","reverse","p","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","NewPostText","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.d5737f6a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3UUsR\",\"contact\":\"ProfileInfo_contact__-go_K\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1L_mC\",\"button\":\"ProfileInfo_button__2qvA1\",\"file_upload_label_input\":\"ProfileInfo_file_upload_label_input__6Z0ys\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3G8Ec\",\"posts\":\"MyPosts_posts__AvNIR\",\"button\":\"MyPosts_button__Jad5N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3K3WV\"};","import React, {useState,useEffect} from 'react';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus (props.status);\r\n    }, [props.status] );\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <b>Status: </b> <span onDoubleClick={ activateEditMode }>{props.status || \"-------\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true} onBlur={ deactivateEditMode }\r\n                       value={status} />\r\n            </div>\r\n            }\r\n        </div>\r\n    )}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../common/Forms Controls/FormsControls.module.css\";\r\nimport {creatField, Input, Textarea} from \"../../common/Forms Controls/Forms Controls\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, error, profile}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div><button className={s.button} onClick={() => { }}>save</button></div>\r\n        {error && <div className={style.formSammaryError}>\r\n            {error}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>Full name</b>: {creatField(\"Full name\", \"fullName\", [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: { creatField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\r\n        </div>\r\n\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            { creatField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\r\n        </div>\r\n\r\n\r\n        <div>\r\n            <b>About me</b>:\r\n            { creatField(\"About me\", \"aboutMe\", [], Textarea  )}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key} className={s.contact}>\r\n                <b>{key}: {creatField(key, \"contacts.\" + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState}  from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../asses/imeges/userPhoto.jpg\";\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n    saveProfile(formData).then( () => {\r\n                setEditMode(false);\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input className={s.file_upload_label_input} type={\"file\"} onChange={onMainPhotoSelected}/>}\r\n\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div> <button className={s.button} onClick={goToEditMode}>edit</button> </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://i.pinimg.com/originals/b5/bb/fb/b5bbfbe67191cc6baf4753c6eb955e70.jpg' />\r\n            { props.message }\r\n\r\n            <div>\r\n                <span>like</span>\r\n                { props.likesCount }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/Forms Controls/Forms Controls\";\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field name=\"newPostText\" component={Textarea} placeholder={\"Post message\"}\r\n                   validate={[required, maxLength10]} />\r\n        </div>\r\n        <div>\r\n            <button className={s.button}>Add post</button>\r\n        </div>\r\n    </form>;\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reduser copy\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet MapStateToProps=(state) => {\r\n    return {\r\n\r\n        posts:  state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet MapDispatchToProps=(dispatch) => {\r\n    return {\r\n\r\n             addPost: (NewPostText) => {\r\n        dispatch(addPostActionCreator(NewPostText));\r\n    }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(MapStateToProps,MapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reduser copy\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId ) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        // console.log(\"RENDER PROFILE\");\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    //console.log('mapStateToProps PROFILE')\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    })\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n"],"sourceRoot":""}